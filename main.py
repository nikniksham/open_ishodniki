import copy
import telebot
from telebot import types
import config
from data import db_session
from data.Inner.PersonAPI import get_person_by_tel_id, create_person, put_self_person, get_nicknames_by_tel_ids, \
    get_list_person_admin, get_persons_with_lower_status, delete_person_admin, get_nickname_by_tel_id, put_person_admin
from data.Inner.QueueAPI import get_list_queue, create_queue, get_queue_by_name, admin_put_queue, put_queue, \
    get_users_from_queue, admin_put_user_queue
from data.Inner.SettingAPI import load_settings, get_settings, admin_put_settings
from data.Inner.main_file import unzip_spisok
from data.Inner.LogsAPI import get_logs_by_page, clear_logs


db_session.global_init("db/mydatabase.sqlite")

bot = telebot.TeleBot(config.token)

# buttons
back_btn = types.KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
admin_btn = types.KeyboardButton("üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
help_btn = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
queues_btn = types.KeyboardButton("üóÇ –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –ª–∞–±—ã")
change_btn = types.KeyboardButton("üñç –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ")
reg_btn = types.KeyboardButton("üìî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
setting_queue_btn = types.KeyboardButton("ü™õ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π")
create_queue_btn = types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å")
ready_btn = types.KeyboardButton("‚úÖ –Ø –≥–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å")
not_ready_btn = types.KeyboardButton("‚ùå –Ø –Ω–µ –≥–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å")
sdal_btn = types.KeyboardButton("üòé –õ–∞–±—É —Å–¥–∞–ª (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏)")
zapis_btn = types.KeyboardButton("‚úèÔ∏è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å")
refresh_btn = types.KeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
rename_btn = types.KeyboardButton("üñç –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å—Å—è")
common_log_btn = types.KeyboardButton("üìë –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤‚Äç")
personal_log_btn = types.KeyboardButton("üïµÔ∏è –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")
clear_btn = types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤")
setting_btn = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
prava1_btn = types.KeyboardButton("üëÆ –î–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
prava2_btn = types.KeyboardButton("üëÆ –î–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
dvigat_vverh_btn = types.KeyboardButton("‚¨ÜÔ∏è –ü–æ–¥–≤–∏–Ω—É—Ç—å –≤–≤–µ—Ä—Ö")
dvigat_vniz_btn = types.KeyboardButton("‚¨áÔ∏èÔ∏è –ü–æ–¥–≤–∏–Ω—É—Ç—å –≤–Ω–∏–∑")
clear_user_btn = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
change_user_btn = types.KeyboardButton("üü¢ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
delete_user_btn = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
change_user_info_btn = types.KeyboardButton("üñç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
yes_btn = types.KeyboardButton("‚úÖ –î–∞")
no_btn = types.KeyboardButton("‚ùå –ù–µ—Ç")
rename_other_btn = types.KeyboardButton("üñç –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
give_admin_btn = types.KeyboardButton("üíé –î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É")
pick_up_admin_btn = types.KeyboardButton("üí© –ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É")

# markups
base_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

main_menu_markup = copy.deepcopy(base_markup)
main_menu_markup.add(help_btn, queues_btn, rename_btn)

main_menu_admin_markup = copy.deepcopy(main_menu_markup)
main_menu_admin_markup.add(admin_btn)

back_to_menu_markup = copy.deepcopy(base_markup)
back_to_menu_markup.add(back_btn)

reg_markup = copy.deepcopy(base_markup)
reg_markup.add(reg_btn)

admin_panel_markup = copy.deepcopy(back_to_menu_markup)
admin_panel_markup.add(setting_queue_btn, setting_btn)

queue_menu_reg_markup = copy.deepcopy(back_to_menu_markup)
queue_menu_reg_markup.add(ready_btn, not_ready_btn, sdal_btn, refresh_btn)

queue_menu_unreg_markup = copy.deepcopy(back_to_menu_markup)
queue_menu_unreg_markup.add(zapis_btn)

log_menu_markup = copy.deepcopy(back_to_menu_markup)
log_menu_markup.add(common_log_btn, personal_log_btn, clear_btn)

settings_menu_markup = copy.deepcopy(back_to_menu_markup)
settings_menu_markup.add(prava1_btn, prava2_btn)

change_users_queue_markup = copy.deepcopy(back_to_menu_markup)
change_users_queue_markup.add(dvigat_vverh_btn, dvigat_vniz_btn, clear_user_btn, change_user_btn)

user_menu_markup = copy.deepcopy(back_to_menu_markup)
user_menu_markup.add(change_user_btn, change_user_info_btn, delete_user_btn)

yes_not_markup = copy.deepcopy(back_to_menu_markup)
yes_not_markup.add(yes_btn, no_btn)


def prepare_spisok(spisok):
    zameni = get_nicknames_by_tel_ids(list(spisok.keys()))
    res = [f"{zameni[key]} {spisok[key]}" for key in spisok.keys()]
    res.insert(0, "–°–ø–∏—Å–æ–∫:")
    return "\n".join(res)


class Dialogs:
    def __init__(self):
        pass

    def base_check(self, message):
        if message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.return_to_main_menu(message)
            return True
        return False

    def return_to_main_menu(self, message, text="–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        bot.send_message(message.chat.id, text=text, reply_markup=(
            main_menu_admin_markup if get_person_by_tel_id(message.from_user.id)['person'][
                                          'status'] > 0 else main_menu_markup))


class AdminDialogs(Dialogs):
    def __init__(self):
        super().__init__()

    def menu_queue(self, message):
        if self.base_check(message):
            return

        markup = copy.deepcopy(back_to_menu_markup)
        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å":
            bot.send_message(message.from_user.id, "–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –æ—á–µ—Ä–µ–¥—å?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.create_new_queue)

        elif message.text[:20] == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å:":
            name = message.text[21:]
            if "error" in get_queue_by_name(name):
                bot.send_message(message.from_user.id, f"–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - {name}", reply_markup=markup)
            else:
                put_self_person(message.from_user.id, args={"last_queue_name": name})
                markup.add(types.KeyboardButton("üñã –Ω–∞–∑–≤–∞–Ω–∏–µ"), types.KeyboardButton("‚ôªÔ∏è –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏"))
                spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
                bot.send_message(message.from_user.id, f"–ß—Ç–æ –º–µ–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ {name}?\n{prepare_spisok(spisok)}", reply_markup=markup)
                bot.register_next_step_handler(message, admin_dialogs.edit_queue)

        else:
            self.return_to_main_menu(message, '—Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–Ω–∞—é')

    def edit_queue(self, message):
        if self.base_check(message):
            return

        if message.text == "üñã –Ω–∞–∑–≤–∞–Ω–∏–µ":
            bot.send_message(message.from_user.id, "–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º?", reply_markup=back_to_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.rename_queue)

        elif message.text == "‚ôªÔ∏è –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏":
            markup = copy.deepcopy(back_to_menu_markup)
            for user in get_users_from_queue(message.from_user.id, get_person_by_tel_id(message.from_user.id)['person']['last_queue_name']):
                markup.add(types.KeyboardButton(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[1]} &&0&& {user[0]}"))
            bot.send_message(message.from_user.id, "–ö–æ–≥–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.change_queue)

        else:
            self.return_to_main_menu(message, '—Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–Ω–∞—é')

    def create_new_queue(self, message):
        if self.base_check(message):
            return

        create_queue(message.from_user.id, message.text)
        self.return_to_main_menu(message, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –Ω–∞–∑–æ–≤—ë–º")

    def rename_queue(self, message):
        if self.base_check(message):
            return

        admin_put_queue(message.from_user.id, get_person_by_tel_id(message.from_user.id)['person']['last_queue_name'], {"name": message.text})
        self.return_to_main_menu(message, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –Ω–∞–∑–æ–≤—ë–º")

    def change_queue(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text[:13] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:":
            put_self_person(message.from_user.id, args={"last_person_name": message.text.split(' &&0&& ')[-1]})
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.from_user.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.text.split(' &&0&& ')[-1]}\n{prepare_spisok(spisok)}", reply_markup=change_users_queue_markup)
            bot.register_next_step_handler(message, admin_dialogs.change_queue)

        elif message.text == "‚¨ÜÔ∏è –ü–æ–¥–≤–∏–Ω—É—Ç—å –≤–≤–µ—Ä—Ö":
            admin_put_user_queue(message.from_user.id, person['last_person_name'], get_queue_by_name(person['last_queue_name'])["success"]['name'], "–≤–≤–µ—Ä—Ö")
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.from_user.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.text.split(' &&0&& ')[-1]}\n{prepare_spisok(spisok)}", reply_markup=change_users_queue_markup)
            bot.register_next_step_handler(message, admin_dialogs.change_queue)

        elif message.text == "‚¨áÔ∏èÔ∏è –ü–æ–¥–≤–∏–Ω—É—Ç—å –≤–Ω–∏–∑":
            admin_put_user_queue(message.from_user.id, person['last_person_name'], get_queue_by_name(person['last_queue_name'])["success"]['name'], "–≤–Ω–∏–∑")
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.from_user.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.text.split(' &&0&& ')[-1]}\n{prepare_spisok(spisok)}", reply_markup=change_users_queue_markup)
            bot.register_next_step_handler(message, admin_dialogs.change_queue)

        elif message.text in ["üü¢ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏"]:
            text = ""
            if message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏":
                admin_put_user_queue(message.from_user.id, person['last_person_name'], get_queue_by_name(person['last_queue_name'])["success"]['name'], "—É–¥–∞–ª–∏—Ç—å")
                text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {person['last_person_name']} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"

            put_self_person(message.from_user.id, args={"last_person_name": ""})
            markup = copy.deepcopy(back_to_menu_markup)
            for user in get_users_from_queue(message.from_user.id, get_person_by_tel_id(message.from_user.id)['person']['last_queue_name']):
                markup.add(types.KeyboardButton(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[1]} &&0&& {user[0]}"))
            bot.register_next_step_handler(message, admin_dialogs.change_queue)
            bot.send_message(message.from_user.id, text+"–ö–æ–≥–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", reply_markup=markup)

        else:
            self.return_to_main_menu(message, "–¢–∞–∫–æ–≥–æ –Ω–µ —É–º–µ—é")

    def log_menu(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text == "üìë –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤‚Äç":
            logs = '\n'.join(get_logs_by_page(message.from_user.id, tel_id=person['last_person_name'])['success'])
            markup = copy.deepcopy(log_menu_markup)
            markup.add(types.KeyboardButton("–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"))
            bot.send_message(message.from_user.id, f"–°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤:\n{logs}", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        elif message.text == "üïµÔ∏è –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞":
            markup = copy.deepcopy(back_to_menu_markup)
            for person in get_list_person_admin(message.from_user.id):
                markup.add(types.KeyboardButton(f"–°–ª–µ–¥–∏–º –∑–∞: {person['nickname']} &&0&& {person['tel_id']}"))
            bot.send_message(message.from_user.id, f"–ó–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        elif message.text == "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã":
            markup = copy.deepcopy(back_to_menu_markup)
            bot.send_message(message.from_user.id, f"–ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å–∫–∞—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.pokazat_page)

        elif message.text[:10] == "–°–ª–µ–¥–∏–º –∑–∞:":
            markup = copy.deepcopy(log_menu_markup)
            markup.add(types.KeyboardButton("–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"))
            put_self_person(message.from_user.id, args={"last_person_name": message.text.split(' &&0&& ')[-1]})
            bot.send_message(message.from_user.id, f"–ñ–µ—Ä—Ç–≤–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        elif message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤":
            markup = copy.deepcopy(log_menu_markup)
            clear_logs(message.from_user.id)
            bot.send_message(message.from_user.id, f"–ò—Å—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        else:
            self.return_to_main_menu(message, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

    def pokazat_page(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text.isdigit():
            logs = '\n'.join(get_logs_by_page(message.from_user.id, int(message.text), tel_id=person['last_person_name'])['success'])
            markup = copy.deepcopy(log_menu_markup)
            markup.add(types.KeyboardButton("–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"))
            bot.send_message(message.from_user.id, f"–°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤:\n{logs}", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        else:
            self.return_to_main_menu(message, '—Å—é–¥–∞ –Ω–∞–¥–æ –ø–∏—Å–∞—Ç—å —á–∏—Å–µ–ª–∫—É!')

    def setting_menu(self, message):
        if self.base_check(message):
            return

        if message.text == "üëÆ –î–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            admin_put_settings(message.from_user.id, {"new_users_can_reg": not (load_settings()["success"]["new_users_can_reg"])})
            bot.send_message(message.from_user.id, f"{get_settings()['success']}", reply_markup=settings_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.setting_menu)

        elif message.text == "üëÆ –î–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            admin_put_settings(message.from_user.id, {"users_can_change_queue": not load_settings()["success"]["users_can_change_queue"]})
            bot.send_message(message.from_user.id, f"{get_settings()['success']}", reply_markup=settings_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.setting_menu)

        else:
            self.return_to_main_menu(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    def user_menu(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text[:13] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:":
            put_self_person(message.from_user.id, args={"last_person_name": message.text.split(' &&0&& ')[-1]})
            bot.send_message(message.from_user.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.text.split(' &&0&& ')[-1]}", reply_markup=user_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.user_menu)

        elif message.text == "üü¢ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            put_self_person(message.from_user.id, args={"last_person_name": ""})
            markup = copy.deepcopy(back_to_menu_markup)
            for user in get_persons_with_lower_status(message.from_user.id)['persons']:
                markup.add(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['nickname']} &&0&& {user['tel_id']}")
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            bot.send_message(message.from_user.id, "–ö–æ–≥–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?", reply_markup=markup)

        elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            bot.register_next_step_handler(message, admin_dialogs.podtverjdenie)
            bot.send_message(message.from_user.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {get_nickname_by_tel_id(person['last_person_name'])}", reply_markup=yes_not_markup)

        elif message.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(rename_other_btn)
            if get_person_by_tel_id(person['last_person_name'])['person']['status'] > 0:
                markup.add(pick_up_admin_btn)
            else:
                markup.add(give_admin_btn)
            markup.add(change_user_btn)
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            bot.send_message(message.from_user.id, "–ß—Ç–æ —Å –Ω–∏–º —Å–¥–µ–ª–∞–µ–º?", reply_markup=markup)

        elif message.text == "üñç –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å":
            markup = copy.deepcopy(back_to_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.rename_user)
            bot.send_message(message.from_user.id, "–ö–∞–∫–æ–≤–æ –µ–≥–æ –Ω–æ–≤–æ–µ –∏–º—è?", reply_markup=markup)

        elif message.text == "üíé –î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É":
            put_person_admin(message.from_user.id, person['last_person_name'], {"status": 1})
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(rename_other_btn, pick_up_admin_btn, change_user_btn)
            bot.send_message(message.from_user.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

        elif message.text == "üí© –ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É":
            put_person_admin(message.from_user.id, person['last_person_name'], {"status": 0})
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(rename_other_btn, give_admin_btn, change_user_btn)
            bot.send_message(message.from_user.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

        else:
            self.return_to_main_menu(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    def podtverjdenie(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text == "‚úÖ –î–∞":
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(change_user_btn)
            delete_person_admin(message.from_user.id, person['last_person_name'])
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            bot.send_message(message.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {person['last_person_name']} —É–¥–∞–ª—ë–Ω", reply_markup=markup)
            put_self_person(message.from_user.id, args={"last_person_name": ""})

        elif message.text == "‚ùå –ù–µ—Ç":
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(change_user_btn)
            bot.register_next_step_handler(message, admin_dialogs.user_menu)
            bot.send_message(message.from_user.id, f"–ù—É –∏ –ª–∞–¥–Ω–æ, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ —É–¥–∞–ª–∏–º", reply_markup=markup)
            put_self_person(message.from_user.id, args={"last_person_name": ""})

        else:
            self.return_to_main_menu(message, "–¢–∞–∫–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω)")

    def rename_user(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if len(message.text) <= 30:
            if "&&0&&" not in message.text:
                put_person_admin(message.from_user.id, person['last_person_name'], {"nickname": message.text})
                bot.send_message(message.from_user.id, f"–ß—É–∂–æ–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=user_menu_markup)
                bot.register_next_step_handler(message, admin_dialogs.user_menu)
            else:
                bot.send_message(message.from_user.id, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ - &&0&&, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=back_to_menu_markup)
                bot.register_next_step_handler(message, admin_dialogs.rename_user)
        else:
            bot.send_message(message.from_user.id, f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ 30 —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=back_to_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.rename_user)


class BaseDialogs(Dialogs):
    def __init__(self):
        super().__init__()

    def menu_queue(self, message):
        if self.base_check(message):
            return

        if not load_settings()["success"]["users_can_change_queue"]:
            self.return_to_main_menu(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üß∏")
            return

        if message.text[:8] == "–û—á–µ—Ä–µ–¥—å:":
            name = message.text[9:]
            queue = get_queue_by_name(name)
            if "error" in queue:
                self.return_to_main_menu(message, f"–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - {name}")
            else:
                spisok = unzip_spisok(queue["success"]["spisok"])
                if str(message.from_user.id) in spisok:
                    markup = queue_menu_reg_markup
                else:
                    markup = queue_menu_unreg_markup
                put_self_person(message.from_user.id, args={"last_queue_name": name})
                bot.send_message(message.chat.id, text=prepare_spisok(spisok), reply_markup=markup)
                bot.register_next_step_handler(message, base_dialogs.do_something_queue)

        else:
            self.return_to_main_menu(message, '—Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–Ω–∞—é')

    def do_something_queue(self, message):
        if self.base_check(message):
            return

        person = get_person_by_tel_id(message.from_user.id)['person']

        if message.text in ["‚úèÔ∏è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å", "üòé –õ–∞–±—É —Å–¥–∞–ª (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏)"]:
            put_queue(message.from_user.id, person['last_queue_name'], "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.chat.id, text=prepare_spisok(spisok), reply_markup=queue_menu_reg_markup)
            bot.register_next_step_handler(message, base_dialogs.do_something_queue)

        elif message.text == "‚úÖ –Ø –≥–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å":
            put_queue(message.from_user.id, person['last_queue_name'], "—è –≥–æ—Ç–æ–≤")
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.chat.id, text=prepare_spisok(spisok), reply_markup=queue_menu_reg_markup)
            bot.register_next_step_handler(message, base_dialogs.do_something_queue)

        elif message.text == "‚ùå –Ø –Ω–µ –≥–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å":
            put_queue(message.from_user.id, person['last_queue_name'], "—è –Ω–µ –≥–æ—Ç–æ–≤")
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.chat.id, text=prepare_spisok(spisok), reply_markup=queue_menu_reg_markup)
            bot.register_next_step_handler(message, base_dialogs.do_something_queue)

        elif message.text == "‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫":
            spisok = unzip_spisok(get_queue_by_name(person['last_queue_name'])["success"]["spisok"])
            bot.send_message(message.chat.id, text=prepare_spisok(spisok), reply_markup=queue_menu_reg_markup)
            bot.register_next_step_handler(message, base_dialogs.do_something_queue)

        else:
            self.return_to_main_menu(message, '—Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–Ω–∞—é')

    def change_self_nickname(self, message):
        if self.base_check(message):
            return

        if len(message.text) <= 30:
            if "&&0&&" not in message.text:
                put_self_person(message.from_user.id, {"nickname": message.text})
                self.return_to_main_menu(message, "–ó–∞–ø–æ–º–Ω–∏–ª –Ω–æ–≤–æ–µ –∏–º—è")
            else:
                self.return_to_main_menu(message, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ - &&0&&")
        else:
            self.return_to_main_menu(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ 30 —Å–∏–º–≤–æ–ª–æ–≤)")


admin_dialogs = AdminDialogs()
base_dialogs = BaseDialogs()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–¥–∑–∏—Ä–∞—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –ª–∞–±–µ—Å–¥–∞–Ω–∏–µ. –ü—Ä–æ—Å—å–±–∞ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤—ã—Å—à–∞—è –º–µ—Ä–∞ –∞–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—ã)".format(message.from_user), reply_markup=reg_markup)


@bot.message_handler(content_types=['text'])
def func(message):
    result = get_person_by_tel_id(message.from_user.id)
    is_login = "success" in result
    if not is_login:
        if message.text == "üìî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
            if load_settings()["success"]["new_users_can_reg"]:
                create_person({"tel_id": message.from_user.id, "nickname": message.from_user.username.replace("&&0&&", "–±–∞–Ω")})
                bot.send_message(message.chat.id, text="–¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", reply_markup=back_to_menu_markup)
            else:
                bot.send_message(message.chat.id, text="–£–ø—Å, –ø–æ—Ö–æ–∂–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=back_to_menu_markup)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            reg_btn = types.KeyboardButton("üìî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            markup.add(reg_btn)
            bot.send_message(message.chat.id, text="–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é", reply_markup=markup)

    else:
        status = result['person']['status']
        if message.text == "üìî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
            bot.send_message(message.chat.id, text="–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", reply_markup=back_to_menu_markup)

        elif message.text == "‚ùì –ü–æ–º–æ—â—å":
            bot.send_message(message.chat.id, text="–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–∑–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–ª—Ö–æ–∑–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–¥–∞—á—É –ª–∞–±. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–µ–Ω. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∏–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–≥, —Ç–æ –ø–∏—Å–∞—Ç—å -> @niko_lausus", reply_markup=back_to_menu_markup)

        elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            markup = (main_menu_admin_markup if status > 0 else main_menu_markup)
            bot.send_message(message.chat.id, text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup)

        elif message.text == "üóÇ –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –ª–∞–±—ã":
            markup = copy.deepcopy(back_to_menu_markup)
            for queue in get_list_queue():
                markup.add(types.KeyboardButton(f"–û—á–µ—Ä–µ–¥—å: {queue['name']}"))
            bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π:", reply_markup=markup)
            bot.register_next_step_handler(message, base_dialogs.menu_queue)

        elif message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and status > 0:
            markup = copy.deepcopy(admin_panel_markup)
            if status > 1:
                markup.add(types.KeyboardButton("üóì –ª–æ–≥–∏"))
                markup.add(types.KeyboardButton("üë®‚Äçüë¶‚Äçüë¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
            bot.send_message(message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–π –ª–æ—Ä–¥", reply_markup=markup)

        elif message.text == "ü™õ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π" and status > 0:
            markup = copy.deepcopy(back_to_menu_markup)
            markup.add(create_queue_btn)
            for queue in get_list_queue():
                markup.add(types.KeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å: {queue['name']}"))
            bot.send_message(message.from_user.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.menu_queue)

        elif message.text == "üóì –ª–æ–≥–∏" and status > 1:
            put_self_person(message.from_user.id, args={"last_person_name": ""})
            bot.send_message(message.from_user.id, "–ó–∞ –∫–µ–º —à–ø–∏–æ–Ω–∏–º?", reply_markup=log_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.log_menu)

        elif message.text == "üñç –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å—Å—è":
            markup = copy.deepcopy(back_to_menu_markup)
            bot.send_message(message.from_user.id, "–ö–∞–∫ —Ç–µ–ø–µ—Ä—å –∑–æ–≤—É—Ç?", reply_markup=markup)
            bot.register_next_step_handler(message, base_dialogs.change_self_nickname)

        elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" and status > 0:
            bot.send_message(message.from_user.id, f"–ü–æ–≥–ª—è–¥–∏–º, —á—Ç–æ —Ç–∞–º –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å\n{get_settings()['success']}", reply_markup=settings_menu_markup)
            bot.register_next_step_handler(message, admin_dialogs.setting_menu)

        elif message.text == "üë®‚Äçüë¶‚Äçüë¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and status > 0:
            markup = copy.deepcopy(back_to_menu_markup)
            for user in get_persons_with_lower_status(message.from_user.id)["persons"]:
                markup.add(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['nickname']} &&0&& {user['tel_id']}")
            bot.send_message(message.from_user.id, f"–ö–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=markup)
            bot.register_next_step_handler(message, admin_dialogs.user_menu)

        else:
            base_dialogs.return_to_main_menu(message, "–¢–∞–∫–æ–º—É –º–µ–Ω—è –Ω–µ —É—á–∏–ª–∏")


bot.polling(none_stop=True)